@model List<QuestionModel>
@{
	ViewData["Title"] = "Sistema de Questões de Informática - Fundamental";
}

<div class="text-center py-4 bg-primary text-white rounded">
	<h1 class="display-4">Questões de Informática</h1>
</div>

@if (TempData["MensagemSucesso"] != null)
{
	<div class="alert alert-success" role="alert">
		<i class="fas fa-check-circle"></i>
		@TempData["MensagemSucesso"]
		<button type="button" class="close-alert" aria-label="Close">&times;</button>
	</div>
}

@if (TempData["MensagemErro"] != null)
{
	<div class="alert alert-danger" role="alert">
		<i class="fas fa-exclamation-circle"></i>
		@TempData["MensagemErro"]
		<button type="button" class="close-alert" aria-label="Close">&times;</button>
	</div>
}

<div class="text-center mt-4">
	<div class="row justify-content-between align-items-center">
		<div class="col-auto">
			<a class="btn btn-success px-4 py-2" role="button" asp-controller="Questions" asp-action="Create">
				Adicionar Nova Questão
			</a>
		</div>
		<div class="col-auto">
			<div class="mb-3">
				<label for="filterLevel" class="form-label" style="font-size: 1.1rem; margin-bottom: 0.2rem; position: relative;">Filtrar por Nível:</label>
				<select id="filterLevel" class="form-select" style="width: 200px; position: relative;">
					<option value="">Todos</option>
					<option value="Fácil">Fácil</option>
					<option value="Médio">Médio</option>
					<option value="Difícil">Difícil</option>
				</select>
			</div>
		</div>
	</div>
</div>

<div class="container mt-5">
	<div class="table-responsive">
		<table class="table table-bordered table-hover table-striped shadow" id="table-questions">
			<thead class="table-primary">
				<tr>
					<th>ID</th>
					<th>Pergunta</th>
					<th>Nível</th>
					<th>Alternativa Correta</th>
					<th>Ações</th>
				</tr>
			</thead>

			<tbody id="questionTable">
				@if (Model != null && Model.Any())
				{
					foreach (QuestionModel questionView in Model)
					{
						<tr class="@GetLevelColorClass(questionView.Level)" data-level="@questionView.Level">
							<td>@questionView.Id</td>
							<td>
								@Html.Raw(FormatQuestionWithAlternatives(questionView.Question))
							</td>
							<td>@questionView.Level</td>
							<td class="@(string.IsNullOrEmpty(questionView.CorrectAlternative) ? "" : "text-center")">
								@questionView.CorrectAlternative
							</td>

							<td>
								<div class="d-flex justify-content-center gap-2">
									<a class="btn btn-primary btn-sm" asp-controller="Questions" asp-action="Edit" asp-route-id="@questionView.Id">Editar</a>
									<a class="btn btn-danger btn-sm" asp-controller="Questions" asp-action="Delete" asp-route-id="@questionView.Id">Excluir</a>
								</div>
							</td>
						</tr>
					}
				}
				else
				{
					<tr>
						<td colspan="5" class="text-center">Nenhuma questão encontrada.</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

<script>
	document.getElementById('filterLevel').addEventListener('change', function () {
		const selectedLevel = this.value;
		const rows = document.querySelectorAll('#questionTable tr');

		rows.forEach(row => {
			const level = row.getAttribute('data-level');
			if (selectedLevel === '' || level === selectedLevel) {
				row.style.display = '';
			} else {
				row.style.display = 'none';
			}
		});
	});
</script>

@functions {
	public string FormatQuestionWithAlternatives(string questionText)
	{
		var questionAndAlternatives = questionText.Split(new[] { "A)", "B)", "C)", "D)", "a)", "b)", "c)", "d)" }, StringSplitOptions.None);

		var question = questionAndAlternatives[0].Trim(); 

		var alternatives = new List<string>();
		if (questionAndAlternatives.Length > 1)
		{
			alternatives.Add("A) " + questionAndAlternatives[1].Trim());
		}
		if (questionAndAlternatives.Length > 2)
		{
			alternatives.Add("B) " + questionAndAlternatives[2].Trim());
		}
		if (questionAndAlternatives.Length > 3)
		{
			alternatives.Add("C) " + questionAndAlternatives[3].Trim());
		}
		if (questionAndAlternatives.Length > 4)
		{
			alternatives.Add("D) " + questionAndAlternatives[4].Trim());
		}

		var formattedText = $"{question}<br /><br />{string.Join("<br />", alternatives)}";

		return formattedText;
	}

	public string GetLevelColorClass(string level)
	{
		return level switch
		{
			"Fácil" => "table-success",
			"Médio" => "table-warning",
			"Difícil" => "table-danger",
			_ => ""
		};
	}
}
