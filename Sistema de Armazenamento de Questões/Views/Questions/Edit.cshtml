@model QuestionModel

<div class="text-center py-4 bg-primary text-white rounded">
    <h1 class="display-4">Editar Questão</h1>
</div>

<form asp-controller="Questions" asp-action="Alterar" method="post" class="mt-4 p-4 bg-light shadow rounded" onsubmit="return reconstructQuestion();">
    <input type="hidden" asp-for="Id" />

    <div class="mb-4">
        <label for="InputQuestion" class="form-label fw-bold text-primary">Enunciado da questão:</label>
        <textarea class="form-control border-primary shadow-sm" id="InputQuestion" rows="4" placeholder="Digite a pergunta..." required></textarea>
    </div>

    <div class="mb-4">
        <label for="SelectLevel" class="form-label fw-bold text-primary">Nível da questão:</label>
        <select class="form-select border-primary shadow-sm" id="SelectLevel" asp-for="Level" required>
            <option value="" disabled>Selecione o nível</option>
            <option value="Fácil" class="text-success">Matemática</option>
            <option value="Médio" class="text-warning">Informática</option>
            <option value="Difícil" class="text-danger"></option>
        </select>
    </div>

    <div class="mb-4">
        <label class="form-label fw-bold text-primary">Alternativas:</label>
        <div id="alternativesContainer"></div>
        <button type="button" class="btn btn-outline-primary mt-2" onclick="addAlternative()">Adicionar alternativa</button>
    </div>

    <div class="mb-4">
        <label for="CorrectAnswer" class="form-label fw-bold text-primary">Alternativa correta:</label>
        <select class="form-select border-primary shadow-sm" id="CorrectAnswer" asp-for="CorrectAlternative" required>
            <option value="" disabled>Selecione a resposta correta</option>
        </select>
    </div>

    <div class="d-flex justify-content-end">
        <a class="btn btn-outline-secondary me-3 px-4" asp-controller="Questions" asp-action="Index">Voltar</a>
        <button type="submit" class="btn btn-success px-5">Salvar</button>
    </div>
</form>

<script>
    let minAlternatives = 2; // Número mínimo permitido
    let alternatives = []; // Armazena as alternativas carregadas

    function loadQuestionData() {
        const fullQuestion = `@Html.Raw(Json.Serialize(Model.Question))`.replace(/\r/g, "").split("\n");
        const correctAlternative = "@Model.CorrectAlternative";

        let mainQuestion = "";
        alternatives = [];

        fullQuestion.forEach(line => {
            if (/^[A-Z]\)/.test(line.trim())) {
                alternatives.push(line.trim().substring(2).trim());
            } else {
                mainQuestion += (mainQuestion ? "\n" : "") + line;
            }
        });

        document.getElementById("InputQuestion").value = mainQuestion.trim();
        renderAlternatives(correctAlternative);
    }

    function renderAlternatives(correctAlternative) {
        const alternativesContainer = document.getElementById("alternativesContainer");
        const correctAnswerSelect = document.getElementById("CorrectAnswer");

        alternativesContainer.innerHTML = "";
        correctAnswerSelect.innerHTML = '<option value="" disabled>Selecione a resposta correta</option>';

        alternatives.forEach((alt, index) => {
            let letter = String.fromCharCode(65 + index);

            const div = document.createElement("div");
            div.classList.add("input-group", "mb-2", "alternative");

            let removeButton = `<button type="button" class="btn btn-outline-danger" onclick="removeAlternative(${index})">X</button>`;
            if (alternatives.length <= minAlternatives) {
                removeButton = `<button type="button" class="btn btn-outline-secondary text-muted" disabled>X</button>`;
            }

            div.innerHTML = `
                <span class="input-group-text">${letter}</span>
                <input type="text" class="form-control border-primary shadow-sm" value="${alt}" required>
                ${removeButton}
            `;

            alternativesContainer.appendChild(div);
            correctAnswerSelect.innerHTML += `<option value="${letter}" ${letter === correctAlternative ? 'selected' : ''}>${letter}</option>`;
        });
    }

    function addAlternative() {
        alternatives.push("");
        renderAlternatives(document.getElementById("CorrectAnswer").value);
    }

    function removeAlternative(index) {
        if (alternatives.length > minAlternatives) {
            alternatives.splice(index, 1);
            renderAlternatives(document.getElementById("CorrectAnswer").value);
        }
    }

    function reconstructQuestion() {
        var questionTextarea = document.getElementById("InputQuestion");
        var originalQuestion = questionTextarea.value.trim();
        var reconstructed = originalQuestion;

        var alternativeInputs = document.querySelectorAll("#alternativesContainer .alternative input");
        alternatives = [];

        alternativeInputs.forEach((input, index) => {
            var letter = String.fromCharCode(65 + index);
            alternatives.push(input.value.trim());
            reconstructed += `\n\n${letter}) ${input.value.trim()}`;
        });

        questionTextarea.value = reconstructed;
        return true;
    }

    document.addEventListener("DOMContentLoaded", loadQuestionData);
</script>